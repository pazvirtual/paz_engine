#ifndef PAZ_ENGINE
#define PAZ_ENGINE

#include <PAZ_Graphics>
#include <PAZ_Audio>
#include <PAZ_IO>
#include <PAZ_Math>
#include <unordered_set>
#include <sstream>

namespace paz
{
    enum class CollisionType
    {
        Default, None, World
    };

    enum class GravityType
    {
        Default, None
    };

    class Threadpool;
    class Triangle;
    class Model
    {
        friend class App;
        friend class Object;
        friend void do_collisions(Threadpool&);

        std::shared_ptr<std::vector<Triangle>> _t;
        double _radius = 0.;
        VertexBuffer _v;
        IndexBuffer _i;
        Texture _diffTex;
        std::array<float, 3> _emiss;
        VertexBuffer _transp;

        double collide(double x, double y, double z, double radius, double&
            xNew, double& yNew, double& zNew, double& xNor, double& yNor,
            double& zNor) const;
        void castRay(double x, double y, double z, double xDir, double yDir,
            double zDir, double& xNor, double& yNor, double& zNor, double& dist)
            const;
        bool sweepVol(double xPrev0, double yPrev0, double zPrev0, double x0,
            double y0, double z0, double xPrev1, double yPrev1, double zPrev1,
            double x1, double y1, double z1, double radius) const;

    public:
        Model() = default;
        Model(const std::string& path, int idx = 0, double zOffset = 0., double
            scale = 1., const std::string& diffTexPath = "", const std::array<
            float, 3>& emiss = {}, const std::vector<std::array<double, 9>>&
            transp = {});
        Model(const std::vector<float>& positions, const std::vector<float>&
            uvs, const std::string& diffTexPath = "", const std::array<float,
            3>& emiss = {}, const std::vector<std::array<double, 9>>& transp =
            {});
    };

    class Object
    {
        friend class App;
        friend void do_collisions(Threadpool&);

        const std::uintptr_t _id;

        double xPrev() const;
        double yPrev() const;
        double zPrev() const;

        virtual void update();
        virtual void onCollide(const Object& o, double xNor, double yNor, double
            zNor, double xB, double yB, double zB);
        virtual void onInteract(const Object& o);
        virtual void onNotify(const Object& o, const Bytes& data);

    public:
        Object();
        Object(const Object& o);
        Object& operator=(const Object& o);
        Object(Object&& o) noexcept;
        Object& operator=(Object&& o) noexcept;
        virtual ~Object();
        void notify(Object& o, const Bytes& data) const;
        void notifyTagged(const std::string& tag, const Bytes& data) const;
        double& x();
        double x() const;
        double& y();
        double y() const;
        double& z();
        double z() const;
        double& xVel();
        double xVel() const;
        double& yVel();
        double yVel() const;
        double& zVel();
        double zVel() const;
        double& xAtt();
        double xAtt() const;
        double& yAtt();
        double yAtt() const;
        double& zAtt();
        double zAtt() const;
        double& xAngRate();
        double xAngRate() const;
        double& yAngRate();
        double yAngRate() const;
        double& zAngRate();
        double zAngRate() const;
        Model& model();
        const Model& model() const;
        CollisionType& collisionType();
        const CollisionType& collisionType() const;
        GravityType& gravityType();
        const GravityType& gravityType() const;
        double& collisionHeight();
        double collisionHeight() const;
        double& collisionRadius();
        double collisionRadius() const;
        double xDown() const;
        double yDown() const;
        double zDown() const;
        double& stdGravParam();
        double stdGravParam() const;
        std::vector<std::array<double, 7>>& lights(); // xyz rgb f
        const std::vector<std::array<double, 7>>& lights() const;
        void addTag(const std::string& tag);
        bool isTagged(const std::string& tag) const;
        void computeAltitude(double& alt, Vec& nor, Vec& vel) const;
    };

    class ObjectPtr
    {
        friend std::ostream& operator<<(std::ostream&, const ObjectPtr&);

        bool _set;
        std::uintptr_t _id;

    public:
        ObjectPtr();
        ObjectPtr(const Object& o);
        ObjectPtr(std::nullptr_t);
        void swap(ObjectPtr& p) noexcept;
        ObjectPtr& operator=(std::nullptr_t);
        const Object& operator*() const;
        Object& operator*();
        const Object* operator->() const;
        Object* operator->();
        operator bool() const;
        bool operator==(const ObjectPtr& p) const;
        bool operator!=(const ObjectPtr& p) const;
        void reset() noexcept;
        void reset(const Object& o) noexcept;
    };

    std::ostream& operator<<(std::ostream& stream, const ObjectPtr& p);

    enum class ConsoleMode
    {
        Disable, ShowAll, CurrentFrame
    };

    class App
    {
    public:
        App() = delete;
        static void Init(const std::string& title);
        static void Run();
        static void AttachCamera(const Object& o);
        static void AttachMic(const Object& o);
        static double CameraYaw();
        static std::stringstream& MsgStream();
        static Bytes GetAsset(const std::string& path);
        static double PhysTime();
        static void SetConsole(ConsoleMode mode);
        static void SetGravity(double acc);
        static void SetSound(const Object& o, const AudioTrack& sound, bool
            loop);
        static void SetSun(const Vec& dir, const Vec& ill);
    };
}

#endif
