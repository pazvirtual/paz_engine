#ifndef PAZ_ENGINE
#define PAZ_ENGINE

#include <PAZ_Graphics>
#include <PAZ_Audio>
#include <PAZ_IO>
#include <PAZ_Math>
#include <unordered_set>
#include <sstream>

namespace paz
{
    enum class CollisionType
    {
        Default, None, World
    };

    enum class GravityType
    {
        Default, None
    };

    class Triangle;
    class Model
    {
        friend class App;
        friend class Object;

        std::shared_ptr<std::vector<Triangle>> _t;
        double _radius = 0.;
        VertexBuffer _v;
        IndexBuffer _i;
        Texture _tex;

        double collide(double x, double y, double z, double radius, double&
            xNew, double& yNew, double& zNew, double& xNor, double& yNor,
            double& zNor) const;
        void castRay(double x, double y, double z, double xDir, double yDir,
            double zDir, double& xNor, double& yNor, double& zNor, double& dist)
            const;
        bool sweepVol(double xPrev0, double yPrev0, double zPrev0, double x0,
            double y0, double z0, double xPrev1, double yPrev1, double zPrev1,
            double x1, double y1, double z1, double radius) const;

    public:
        Model() = default;
        Model(const std::string& path, int idx = 0, double zOffset = 0., double
            scale = 1., const std::string& texPath = "");
    };

    class Object
    {
        friend class App;

        const std::uintptr_t _id;

        double xPrev() const;
        double yPrev() const;
        double zPrev() const;

        virtual void update();
        virtual void onCollide(const Object& o);
        virtual void onInteract(const Object& o);
        virtual void onNotify(const Object& o, const Bytes& data);

    public:
        Object();
        Object(const Object& o);
        Object& operator=(const Object& o);
        virtual ~Object();
        void notify(Object& o, const Bytes& data) const;
        void notifyTagged(const std::string& tag, const Bytes& data) const;
        double& x();
        double x() const;
        double& y();
        double y() const;
        double& z();
        double z() const;
        double& xVel();
        double xVel() const;
        double& yVel();
        double yVel() const;
        double& zVel();
        double zVel() const;
        double& xAtt();
        double xAtt() const;
        double& yAtt();
        double yAtt() const;
        double& zAtt();
        double zAtt() const;
        double& xAngRate();
        double xAngRate() const;
        double& yAngRate();
        double yAngRate() const;
        double& zAngRate();
        double zAngRate() const;
        Model& model();
        const Model& model() const;
        CollisionType& collisionType();
        const CollisionType& collisionType() const;
        GravityType& gravityType();
        const GravityType& gravityType() const;
        double& collisionHeight();
        double collisionHeight() const;
        double& collisionRadius();
        double collisionRadius() const;
        double xDown() const;
        double yDown() const;
        double zDown() const;
        double& stdGravParam();
        double stdGravParam() const;
        void addTag(const std::string& tag);
        bool isTagged(const std::string& tag) const;
        void computeAltitude(double& alt, Vec& nor, Vec& vel) const;
    };

    enum class UiAction
    {
        None, Start, Quit, ToggleFullscreen, ToggleHidpi
    };

    enum class UiLayout
    {
        Horizontal, Vertical
    };

    enum class UiAlignment
    {
        Left, Center, Right
    };

    class UiDescriptor
    {
        friend class App;

        std::string _title;
        std::vector<std::pair<UiAction, std::string>> _buttons;
        UiLayout _layout = UiLayout::Vertical;
        UiAlignment _alignment = UiAlignment::Left;

    public:
        void setTitle(const std::string& title);
        void setLayout(UiLayout layout);
        void alignText(UiAlignment alignment);
        void addButton(UiAction action, const std::string& str);
    };

    enum class ConsoleMode
    {
        Disable, ShowAll, CurrentFrame
    };

    class App
    {
    public:
        App() = delete;
        static void Init(const std::string& sceneShaderPath, const std::
            string& fontPath, const UiDescriptor& startMenu);
        static void Run();
        static void AttachCamera(const Object& o);
        static double CameraYaw();
        static std::stringstream& MsgStream();
        static Bytes GetAsset(const std::string& path);
        static double PhysTime();
        static void SetConsole(ConsoleMode mode);
        static void SetGravity(double acc);
    };
}

#endif
