#ifndef PAZ_ENGINE
#define PAZ_ENGINE

#include <PAZ_Graphics>
#include <PAZ_IO>
#include <unordered_set>

namespace paz
{
    enum class CollisionType
    {
        Default, None, World
    };

    class Triangle;
    class Model
    {
        friend class App;

        std::shared_ptr<std::vector<paz::Triangle>> _t;
        VertexBuffer _v;
        IndexBuffer _i;

        double collide(double x, double y, double z, double radius, double&
            xNew, double& yNew, double& zNew, double& xNor, double& yNor,
            double& zNor) const;
        void castRay(double x, double y, double z, double xDir, double yDir,
            double zDir, double& xNor, double& yNor, double& zNor, double& dist)
            const;

    public:
        Model() = default;
        Model(const std::string& path, int idx = 0);
    };

    class Object
    {
        friend class App;

        const std::uintptr_t _id;

        double& localNorX();
        double& localNorY();
        double& localNorZ();
        char& grounded();

        double xPrev() const;
        double yPrev() const;
        double zPrev() const;

    public:
        Object();
        virtual ~Object();
        virtual void update();
        virtual void onCollide(const Object& o);
        virtual void onInteract(const Object& o);
        double& x();
        double x() const;
        double& y();
        double y() const;
        double& z();
        double z() const;
        double& xVel();
        double xVel() const;
        double& yVel();
        double yVel() const;
        double& zVel();
        double zVel() const;
        double& xAtt();
        double xAtt() const;
        double& yAtt();
        double yAtt() const;
        double& zAtt();
        double zAtt() const;
        double& xAngRate();
        double xAngRate() const;
        double& yAngRate();
        double yAngRate() const;
        double& zAngRate();
        double zAngRate() const;
        Model& model();
        const Model& model() const;
        CollisionType& collisionType();
        const CollisionType& collisionType() const;
        double localNorX() const;
        double localNorY() const;
        double localNorZ() const;
        bool grounded() const;
        double& height();
        double height() const;
        double& collisionRadius();
        double collisionRadius() const;
    };

    class App
    {
    public:
        App() = delete;
        static void Init(const std::string& sceneShaderPath, const std::
            string& fontPath);
        static void Run();
        static void AttachCamera(/*const*/ Object& o);
        static double CameraYaw();
    };
}

#endif
